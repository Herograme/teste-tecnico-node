# Docker Compose para Coolify
# Otimizado para deploy em VPS com Coolify
version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_DATABASE:-teste_tecnico}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USERNAME:-postgres}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Coolify gerencia as portas - não exponha manualmente
    # ports:
    #   - '5432:5432'

  # Aplicação NestJS
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3000}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_DATABASE: ${DB_DATABASE:-teste_tecnico}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    # Coolify gerencia as portas e proxy reverso
    expose:
      - "3000"
    labels:
      # Labels para Coolify identificar o serviço principal
      - "coolify.managed=true"
      - "coolify.type=application"
      # Health check para Coolify
      - "coolify.healthcheck.path=/"
      - "coolify.healthcheck.port=3000"
      - "coolify.healthcheck.interval=30s"

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
